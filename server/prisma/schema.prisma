generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------
// User model (Admin users)
// ----------------------
model User {
  user_id      String   @id @default(uuid()) @map("user_id")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  phoneNumber  String   @map("phone_number")
  email        String   @unique @map("email")
  dob          DateTime @map("date_of_birth")
  userName     String   @unique @map("username")
  password     String   @map("password_hash")
  role         String   @default("admin") @map("role")
  school_id    String   @map("school_id")

  school       School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade)

  created_at   DateTime @default(now()) @map("created_at")
  updated_at   DateTime @updatedAt @map("updated_at")

  @@map("users_tbl")
}

// ----------------------
// School model
// ----------------------
model School {
  school_id String   @id @default(uuid()) @map("school_id")
  name      String   @map("school_name")
  username  String   @unique              // âœ… new field
  location  String?

  classes   Class[]
  users     User[]

  @@map("school_tbl")
}


// ----------------------
// Class model
// ----------------------
model Class {
  class_id     String    @id @default(uuid()) @map("class_id")
  class_level  Int       @map("class_level")
  class_stream String    @map("class_stream")
  school_id    String    @map("school_id")

  school       School      @relation(fields: [school_id], references: [school_id], onDelete: Cascade)
  students     Student[]
  exams        ClassExam[]
  classExamSubjects ClassExamSubject[]
  results      ExamResult[]

  @@map("class_tbl")
}

// ----------------------
// Student model
// ----------------------
model Student {
  student_adm_no String @id @map("student_adm_no")
  students_name  String @map("students_name")
  kcse_entry     Int    @map("kcse_entry")
  class_id       String @map("class_id")

  class          Class            @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  subjects       StudentSubject[]
  results        ExamResult[]

  @@map("student_tbl")
}

// ----------------------
// Subject model
// ----------------------
model Subject {
  subject_id   String           @id @default(uuid()) @map("subject_id")
  subject_name String           @map("subject_name")

  students     StudentSubject[]
  results      ExamResult[]
  classExamSubjects ClassExamSubject[]

  @@map("subjects_model")
}

// ----------------------
// StudentSubject join table
// ----------------------
model StudentSubject {
  student_adm_no String
  subject_id     String

  student Student @relation(fields: [student_adm_no], references: [student_adm_no], onDelete: Cascade)
  subject Subject @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)

  @@id([student_adm_no, subject_id])
  @@map("student_subjects_tbl")
}

// ----------------------
// Exam model
// ----------------------
model Exam {
  exam_id String   @id @default(uuid()) @map("exam_id")
  name    String   @map("exam_name")
  date    DateTime @map("exam_date")
  term    Int
  year    Int
  status  String   @map("exam_status")

  classes ClassExam[]
  classExamSubjects ClassExamSubject[]
  results ExamResult[]

  @@map("exam_tbl")
}

// ----------------------
// ClassExam join table
// ----------------------
model ClassExam {
  class_id String
  exam_id  String

  class Class @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  exam  Exam  @relation(fields: [exam_id], references: [exam_id], onDelete: Cascade)

  @@id([class_id, exam_id])
  @@map("class_exams_tbl")
}

// ----------------------
// ClassExamSubject join table
// ----------------------
model ClassExamSubject {
  class_id   String
  exam_id    String
  subject_id String
  status     String @default("upload") @map("status")

  class   Class   @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  exam    Exam    @relation(fields: [exam_id], references: [exam_id], onDelete: Cascade)
  subject Subject @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)

  @@id([class_id, exam_id, subject_id])
  @@map("class_exam_subjects_tbl")
}

// ----------------------
// ExamResult model
// ----------------------
model ExamResult {
  result_id      String   @id @default(uuid()) @map("result_id")
  student_adm_no String
  exam_id        String
  subject_id     String
  class_id       String   @map("class_id")
  marks          Float    @map("marks_obtained")
  percentage     Float?
  grade          String?
  created_at     DateTime @default(now()) @map("created_at")
  updated_at     DateTime @updatedAt @map("updated_at")

  student Student @relation(fields: [student_adm_no], references: [student_adm_no], onDelete: Cascade)
  exam    Exam    @relation(fields: [exam_id], references: [exam_id], onDelete: Cascade)
  subject Subject @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
  class   Class   @relation(fields: [class_id], references: [class_id], onDelete: Cascade)

  @@unique([student_adm_no, exam_id, subject_id])
  @@map("exam_results_tbl")
}
